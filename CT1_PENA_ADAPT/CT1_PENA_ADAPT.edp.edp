    //									SOLVE STOKES EQUATION 				*
    //					FOR AN INCOMPRESSIBLE FLOW VISCOUS FUID				*
    //					Re<<1												*
    //					Stationary Mode										*
    //***********************************************************************

    //load "parms_FreeFem"

    // Trace de l'éxécution dans un fichier
    ofstream ufile("LOG_CT1_PENA_ADAPT_UMFPACK.txt");
    ofstream gfile("LOG_CT1_PENA_ADAPT_GMRES.txt");

    int Gcpt;
    int Ucpt;
    string knu;
    //*****************************************************************************
    //		***	SET PARAMETER FLOW:
    real mu=1.0;										//DYNAMIQUE VISCOSITY
    real Uo=1.0;										//CARACTERISTIC SPEED
    //	***	DEFINE FUNCTION VOL:
    real f1=1.0,f2=1.0;            //	***	DEFINE FUNCTION VOL:
    int  DKSP;                     //DIM KRYLOV (<=>m)
    real PREP;                     //tol solver
    int IDPREP;                    //DUAL DE PREP POUR SPLOT
    real[int] TPREP(4);            //precision du solver
    int[int] DTPREP(4);             //et dual du tableau pour splot
    TPREP[0] = 1.0e-6;
    DTPREP[0]=4;
    TPREP[1] = 1.0e-8;
    DTPREP[1]=3;
    TPREP[2] = 1.0e-10;
    DTPREP[2]=2;
    TPREP[3] = 1.0e-12;
    DTPREP[3]=1;
    int S1 = TPREP.n;                             //ON STOCK LA SIZE
    real[int] perturbation(9);       //pour la perturbation,
    int[int] Dperturbation(9);       // et Dperturbation pour les splots (chgt de var)
    perturbation[0]=10.0;
     Dperturbation[0]=9;
    perturbation[1]=1.0;
     Dperturbation[1]=8;
    perturbation[2]=0.1;
     Dperturbation[2]=7;
    perturbation[3]=0.001;
     Dperturbation[3]=6;
    perturbation[4]=0.000015;
     Dperturbation[4]=5;
    perturbation[5]=0.00001;
     Dperturbation[5]=4;
    perturbation[6]=0.0000015;
     Dperturbation[6]=3;
    perturbation[7]=0.000001;
     Dperturbation[7]=2;
    perturbation[8]=0.0000001;
     Dperturbation[8]=1;

    int S2 = perturbation.n;
    real tmps1,tmps2;             // TEMPS SOLVER

    for(int NUMSOLVER=0;NUMSOLVER<2;++NUMSOLVER) //BOUCLE SUR LE SOLVER, 0->UMFPACK & 1->GMRES
    {//BOUCLE NUMSOLVER

      for(int iprep=0; iprep<S1; iprep=iprep+1)
      { //BOUCLE PRECISION DU SOLVER GMRES

        PREP = TPREP[iprep];
        IDPREP = DTPREP[iprep];

        for(int iperturbation=0; iperturbation<S2; ++iperturbation)
        { //BOUCLE SUR LA PERTURBATION
          int PTEDGE=10;
          //POINTS SEED PAR COTE DU MESH
          //	***	DEFINE MESH BY BORDER THEN BY BUILD:
          mesh   CT1;                                    	 // SIMILI OF REF TRIANGULAR MESH
          border LOW(t=0,1) {x=t;y=0;label=1;};            // LOWER BORDER
          border DIAG(t=1,0) {x=t;y=1-t;label=2;};         // DIAG BORDER
          border LEFT(t=1,0) {x=0;y=t;label=3;};           // LEFT BORDER
          CT1=buildmesh( LOW(PTEDGE) + DIAG(PTEDGE+PTEDGE/3) + LEFT(PTEDGE) );
          fespace Vh(CT1, P1b);							//FOR VITESSE
          Vh u1, u2;
          Vh v1, v2;									      //v is test function, u true unknow
          fespace Qh(CT1,P1);								//FOR PRESSURE
          Qh p;
          Qh q;
          for(int k=0;k<4;++k) //BOUCLE SUR MESH
          {
          if((NUMSOLVER==0 & iprep==0) | (NUMSOLVER==1))
          {
            if(k==0){knu="k_zero.eps";}
            if(k==1){knu="k_un.eps";}
            if(k==2){knu="k_deux.eps";}
            if(k==3){knu="k_trois.eps";}
            plot(LOW(PTEDGE)+DIAG(PTEDGE)+LEFT(PTEDGE));
            plot(CT1, ps=knu);

            p=0.0;
            q=0;
            u1=0;
            v1=0;
            u2=0;
            v2=0;
            macro GRAD(u) [dx(u), dy(u)]//
            macro DIV(u1,u2) (dx(u1)+dy(u2))//

            if(NUMSOLVER==0 & iprep==0)
            {
            DKSP = Vh.ndof+Qh.ndof; // dimKrylov here also the real Vh.ndof+Qh.ndof for the current mesh
            tmps1 = clock();
            problem STOKES([u1,u2,p],[v1,v2,q],solver=UMFPACK)=int2d(CT1)(mu*(GRAD(u1)' *GRAD(v1)+GRAD(u2)' *GRAD(v2))
            -p*DIV(v1,v2)-DIV(u1,u2)*q-p*q*perturbation[iperturbation])+int2d(CT1)(f1*v1+f2*v2)+on(1,2,3,u1=x,u2=-y);
            STOKES;
            tmps2 = clock();
            if(k!=4){CT1 = adaptmesh(CT1,[u1,u2],p,err=0.015,nbvx=2000);}
            }
            else if(NUMSOLVER == 1)
            {
            DKSP = Vh.ndof+Qh.ndof; // dimKrylov here also the real Vh.ndof+Qh.ndof for the current mesh
            tmps1 = clock();
            problem STOKES([u1,u2,p],[v1,v2,q],solver=GMRES,dimKrylov=DKSP,eps=PREP,nbiter=Vh.ndof+2*Qh.ndof)=int2d(CT1)(mu*(GRAD(u1)' *GRAD(v1)+GRAD(u2)' *GRAD(v2))
            -p*DIV(v1,v2)-DIV(u1,u2)*q-p*q*perturbation[iperturbation])+int2d(CT1)(f1*v1+f2*v2)+on(1,2,3,u1=x,u2=-y);
            STOKES;
            tmps2 = clock();
            if(k!=4){CT1 = adaptmesh(CT1,[u1,u2],p,err=0.01,nbvx=2000);}
            }


            //SOLUTION ANALYTIQUE
            Vh ue1,ue2;
            Qh pe;

            ue1=x;
            ue2=-y;

            pe=x+y-2.0/3.0;

            if(NUMSOLVER==0 & iprep==0)
            {
            // Calcul des erreurs
            real normeL2, errL2, errPL2, NpL2;
            normeL2 = sqrt( int2d(CT1) ( (ue1)^2+(ue2)^2 ) );
            errL2   = sqrt( int2d(CT1) ( (u1-ue1)^2+(u2-ue2)^2 ) );
            NpL2    = sqrt( int2d(CT1)((pe)^2));
            errPL2  = sqrt( int2d(CT1) (p-pe)^2);
            cout<< "UMFPACK " << perturbation[iperturbation] << " " <<  DKSP << " " << errL2/normeL2 << " " << errPL2/NpL2 << " " << tmps2-tmps1 <<endl;
            cout << " UMFPACK ERR L2 RELATIVE=" << "sur la vitesse:" << errL2/normeL2 << endl;
            cout << " UMFPACK ERR L2 RELATIVE=" << "sur la pression:" << errPL2/NpL2 <<endl;
            //ufile << perturbation[iperturbation] << " " <<  Vh.ndof+Qh.ndof << " " << errL2/normeL2 << " " << errPL2/NpL2 << " " << tmps2-tmps1 <<endl;
            ufile <<  Dperturbation[iperturbation] << " " <<  DKSP << " " << errL2/normeL2 << " " << errPL2/NpL2 << " " << tmps2-tmps1 <<endl;
            }
            else if(NUMSOLVER == 1)
            {
            // Calcul des erreurs
            real normeL2, errL2, errPL2, NpL2;
            normeL2 = sqrt( int2d(CT1) ( (ue1)^2+(ue2)^2 ) );
            errL2   = sqrt( int2d(CT1) ( (u1-ue1)^2+(u2-ue2)^2 ) );
            NpL2    = sqrt( int2d(CT1)((pe)^2));
            errPL2  = sqrt( int2d(CT1) (p-pe)^2);
	           //cout << Vh.ndof+Qh.ndof <<" "<< errL2/normeL2 <<" "<< errPL2/NpL2<<" "<< tmps2-tmps1 << " " << perturbation[iperturbation] << " DIMKRYLOV= "<< DKSP << " eps= "<<PREP<<endl;
             //gfile << Vh.ndof+Qh.ndof <<" "<< errL2/normeL2 <<" "<< errPL2/NpL2<<" "<< tmps2-tmps1<< " " << perturbation[iperturbation] << " DIMKRYLOV= "<< DKSP << " eps= "<<PREP<<endl;
             cout <<"GMRES " << PREP << " " << perturbation[iperturbation] << " " <<  DKSP << " " <<  DKSP << " " << errL2/normeL2 << " " << errPL2/NpL2 << " " << tmps2-tmps1 <<endl;
             cout << " GMRES ERR L2 RELATIVE=" << "sur la vitesse:" << errL2/normeL2 << endl;
             cout << " GMRES ERR L2 RELATIVE=" << "sur la pression:" << errPL2/NpL2 <<endl;
             gfile << IDPREP << " " << Dperturbation[iperturbation] << " " <<  DKSP << " " <<  DKSP << " " << errL2/normeL2 << " " << errPL2/NpL2 << " " << tmps2-tmps1 <<endl;
             }

           }
          }//FIN BOUCLE mesh
            if(NUMSOLVER==0 & iprep==0){
            ufile <<" "<<endl;
            ufile <<" "<<endl;}

        }//FIN BOUCLE PERTURBATION
        if(NUMSOLVER==1){
        gfile <<" "<<endl;
        gfile <<" "<<endl;}

      }//FIN BOUCLE Precision
}//FIN BOUCLE NUMSOLVER
Gcpt = S1 * S2;//= size(TPREP)*size(PERTURBATION)
Ucpt = S2;
